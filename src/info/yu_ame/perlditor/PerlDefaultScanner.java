package info.yu_ame.perlditor;

import org.eclipse.jface.text.TextAttribute;
import org.eclipse.jface.text.rules.IRule;
import org.eclipse.jface.text.rules.IToken;
import org.eclipse.jface.text.rules.RuleBasedScanner;
import org.eclipse.jface.text.rules.Token;

public class PerlDefaultScanner extends RuleBasedScanner {

    private static final String[] controls = new String[] { 
        "if", "else", "elsif", "unless", "do",
        "while", "for", "foreach", "until",
    };
    
    private static final String[] functions = new String[] {
        "__PACKAGE__-",
        "abs",
        "accept",
        "alarm",
        "atan2",
        "bind",
        "binmode",
        "bless",
        "caller",
        "chdir",
        "chmod",
        "chomp",
        "chop",
        "chown",
        "chr",
        "chroot",
        "close",
        "closedir",
        "connect",
        "continue",
        "cos",
        "crypt",
        "dbmclose",
        "dbmopen",
        "defined",
        "delete",
        "die",
        "dump",
        "each",
        "eof",
        "eval",
        "exec",
        "exists",
        "exit",
        "exp",
        "fcntl",
        "fileno",
        "flock",
        "fork",
        "format",
        "formline",
        "getc",
        "getlogin",
        "getpeername",
        "getpgrp",
        "getppid",
        "getpriority",
        "getsockname",
        "getsockopt",
        "glob",
        "gmtime",
        "goto",
        "grep",
        "hex",
        "import",
        "index",
        "int",
        "ioctl",
        "join",
        "keys",
        "kill",
        "last",
        "lc",
        "lcfirst",
        "length",
        "link",
        "listen",
        "local",
        "localtime",
        "log",
        "lstat",
        "map",
        "mkdir",
        "msgctl",
        "msgget",
        "msgrcv",
        "msgsnd",
        "my",
        "next",
        "no",
        "oct",
        "open",
        "opendir",
        "ord",
        "our",
        "pack",
        "package",
        "pipe",
        "pop",
        "pos",
        "print",
        "printf",
        "prototype",
        "push",
        "quotemeta",
        "rand",
        "read",
        "readdir",
        "readline",
        "readlink",
        "readpipe",
        "recv",
        "redo",
        "ref",
        "rename",
        "require",
        "reset",
        "return",
        "reverse",
        "rewinddir",
        "rindex",
        "rmdir",
        "scalar",
        "seek",
        "seekdir",
        "select",
        "select",
        "semctl",
        "semget",
        "semop",
        "send",
        "setpgrp",
        "setpriority",
        "setprotoent",
        "setsockopt",
        "shift",
        "shmctl",
        "shmget",
        "shmread",
        "shmwrite",
        "shutdown",
        "sin",
        "sleep",
        "socket",
        "socketpair",
        "sort",
        "splice",
        "split",
        "sprintf",
        "sqrt",
        "srand",
        "stat",
        "study",
        "substr",
        "sub",
        "symlink",
        "syscall",
        "sysopen",
        "sysread",
        "sysseek",
        "system",
        "syswrite",
        "tell",
        "telldir",
        "tie",
        "tied",
        "time",
        "times",
        "truncate",
        "uc",
        "ucfirst",
        "umask",
        "undef",
        "unlink",
        "unpack",
        "unshift",
        "untie",
        "use",
        "utime",
        "values",
        "vec",
        "wait",
        "waitpid",
        "wantarray",
        "warn",
        "write",
    };

    
    public PerlDefaultScanner(ColorManager manager) {
        
        IToken token_keyword =
            new Token(
                new TextAttribute(manager.getColor(
                    Preference.getPreferenceRGB(PreferenceKeys.COLOR_KEYWORD)
                )));

        IToken token_function =
            new Token(
                new TextAttribute(manager.getColor(
                        Preference.getPreferenceRGB(PreferenceKeys.COLOR_FUNCTION)		
                )));        
        
        IRule[] rules = new IRule[2];
        rules[0] = new PerlWordRule(controls, token_keyword);     
        rules[1] = new PerlWordRule(functions, token_function);     
        
        setRules(rules);
        
    }    
        
    
}
