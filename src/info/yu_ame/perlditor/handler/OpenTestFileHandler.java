package info.yu_ame.perlditor.handler;

import info.yu_ame.perlditor.Preference;
import info.yu_ame.perlditor.PreferenceKeys;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchPartReference;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.editors.text.TextEditor;
import org.eclipse.ui.part.ISetSelectionTarget;


public class OpenTestFileHandler extends AbstractHandler {
  public Object execute(ExecutionEvent event) throws ExecutionException {
      
     try{
     IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
     IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
     TextEditor editor = (TextEditor)page.getActiveEditor();
     

     IDocument document = editor.getDocumentProvider().getDocument(editor.getEditorInput());
     String text = document.get();

     Pattern p_package = Pattern.compile("package\\s+([a-zA-Z0-9:]+);");
     Matcher m_package = p_package.matcher(text);
     if(!m_package.find()){	 
         return null;
     }
     String s_package = m_package.group(1);
     String path = Preference.getString(PreferenceKeys.TEST_FILE_LIB) + "/" + s_package.replaceAll("::", "/");

     
     IFileEditorInput input = (IFileEditorInput)page.getActiveEditor().getEditorInput() ;
     IFile filea = input.getFile();
     IProject ip = filea.getProject();
     
     ArrayList<String> list = new ArrayList<String>();
     list.add(path + ".t");
     
     while(path.matches("^.+/[a-zA-Z0-9]+$")){
         path = path.replaceFirst("/[a-zA-Z0-9]+$", "");
         list.add(path);
     }
     
     IResource foundR = null;
     for(String tmp: list){
         System.out.println("p="+tmp);
         IResource rtmp = ip.findMember(tmp);
         if(rtmp != null && rtmp.exists()){
             foundR = rtmp;
             break;
         }
     }
     if(foundR == null){
         return null;
     }
     
     IResource resource = foundR;
     
     List<IWorkbenchPart> parts = new ArrayList<IWorkbenchPart>();
     IWorkbenchPartReference refs[] = page.getViewReferences();
     for (int i = 0; i < refs.length; i++) {
         IWorkbenchPart part = refs[i].getPart(false);
         if (part != null) {
                parts.add(part);
            }
     }
     refs = page.getEditorReferences();
     for (int i = 0; i < refs.length; i++) {
         if (refs[i].getPart(false) != null) {
                parts.add(refs[i].getPart(false));
            }
     }
     final ISelection selection = new StructuredSelection(resource);
     Iterator<IWorkbenchPart> itr = parts.iterator();
     while (itr.hasNext()) {
         IWorkbenchPart part = (IWorkbenchPart) itr.next();
         ISetSelectionTarget targetb = null;
         if (part instanceof ISetSelectionTarget) {
                targetb = (ISetSelectionTarget) part;
            } else {
                targetb = (ISetSelectionTarget) part
                     .getAdapter(ISetSelectionTarget.class);
            }
         if (targetb != null) {
             // select and reveal resource
             final ISetSelectionTarget finalTarget = targetb;
             window.getShell().getDisplay().asyncExec(new Runnable() {
                 public void run() {
                     finalTarget.selectReveal(selection);
                 }
             });
         }
     }
     }catch(Exception e){
         e.printStackTrace();
     }

    return null;
  }
}